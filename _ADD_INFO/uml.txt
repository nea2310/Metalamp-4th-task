

model
	private changeMode: boolean;
	public conf: IConf;
	private startConf: IConf;
	private backEndConf: IConf;
	private methods: Imethods;
	private data: Idata;
	private onStart?: Function | null;
	private onUpdate?: Function | null;
	private onChange?: Function | null;
	private noCalVal: boolean;
	------------------------------
	public getConf(conf: IConf): conf: IConf
	public start(): void
	public getData(): conf: IConf
	public calcPos(string, number,number,number,number,number,number,number,string): string | number
	public calcPosKey(string, boolean, string): string | number | {string, number}
private checkConf(conf: IConf): conf: IConf
public update(newConf: IConf): IConf & Idata // ?????
private findChangedConf(conf: IConf, newConf: IConf):methods: Imethods
private async switchVertical(): void
private async switchRange(): void
private async updateControlPos(): void
private switchScale(): void
private switchBar(): void
private switchTip(): void
private setSticky(number): number
private calcFromPosition(): void
private calcToPosition(): void
private calcBar(): void
private calcScale(): void
private calcVal(string, number, string): void
	================================

	controller
	public model: sliderModel;
	public view: sliderView;
	private enabled: boolean;
private handleFromPosition: Function
private handleToPosition: Function
private handleFromValue: Function
private handleToValue: Function
private handleScale: Function
private handleBar: Function
private handleIsVertical: Function
private handleIsRange: Function
private handleIsScale: Function
private handleIsBar: Function
private handleIsTip: Function
private handleMoveEvent: Function
private handleKeydownEvent: Function

-----------------------------------

	public update(conf: IConf)
	public getData():conf: IConf
	public disable(): void
	public enable(): void
	public destroy(): void
	private init(): void
	private createListeners(): void
	private removeListeners(): void


	================================
view

	public viewControl: sliderViewControl;
	public viewScale: sliderViewScale;
	public viewBar: sliderViewBar;
	private root: HTMLElement;
	public slider: HTMLElement;
	private track: HTMLElement;
	private frame: HTMLElement;
	private conf: IConf;
	public backEndConf: IConf;
	private handleMoveEvent: Function
	private handleKeydownEvent: Function

	---------------------------------
	public init(conf: IConf): void
	public disable(): void
	public enable(): void
	public updateFromPos(data: Idata, conf: IConf): void
	public updateToPos(data: Idata, conf: IConf): void
	public updateFromVal(data: Idata): void
	public updateToVal(data: Idata): void
	public updateScale(data: Idata, conf: IConf): void
	public updateBar(data: Idata, conf: IConf): void
	public switchVertical(conf: IConf): void
	public switchRange(conf: IConf): void
	public switchScale(conf: IConf): void
	public switchBar(conf: IConf): void
	public switchTip(conf: IConf): void
	private render(): void
	private collectParms(): void
	private createSubViews(): void
	private createListeners(): void

	================================

	scale

	private slider: HTMLElement;
	private startWidth: number = 0;
	private track: HTMLElement;
	private markList: HTMLElement[];
	private conf: IConf;
	private lastLabelRemoved: boolean;
	private scaleMarks: {number, number }[];
	private calcMarkList: boolean

	--------------------------------
	public createScale({number, number }[],
	conf: IConf): Function(HTMLElement[]): HTMLElement[] //??

	public switchScale(conf: IConf): NodeListOf<Element>

	private checkScaleLength(markList: HTMLElement[]):  HTMLElement[]
	private addLastLabel(boolean): void
	private resize(): void

			================================

	control
	public controlMin: HTMLElement;
	public controlMax: HTMLElement;
	public tipMin: HTMLInputElement;
	public tipMax: HTMLInputElement;
	public track: HTMLInputElement;

	private conf: IConf;
	private slider: HTMLElement;
	private root: HTMLInputElement;
	private data: Idata;
	private initDone: boolean

	private defineControl: Function

	-------------------------------
	public updatePos(HTMLElement, number): void
	public updateVal(string, boolean): void
	public updateInput(conf: IConf): void
	public switchVertical(conf: IConf): void
	public switchRange(conf: IConf): void
	public switchTip(conf: IConf): void
	private init(conf: IConf): void
	private renderControl(string, string, number): HTMLButtonElement
	private renderLeftControl(): void
	private renderRightControl(): void
	private getMetrics(HTMLElement)
	private dragControlMouse(): void
	private dragControlTouch(): void
	private pressControl(): void
	private clickTrack(): void
	private calcTipPos(boolean, HTMLElement): string

======================================
bar

	private slider: HTMLElement;
	private track: HTMLElement;
	private elem: HTMLElement;
	private progressBar: HTMLElement;
	private controlMin: HTMLElement;
	private controlMax: HTMLElement;
	private controlMinDist: number;
	private controlMaxDist: number;
	private markList: HTMLElement[];
	private conf: IConf;
	private scale: HTMLElement;
	private checkNext: boolean;
	private lastLabelRemoved: boolean;
	---------------------------------

	public switchVertical(conf: IConf): void
	public switchBar(conf: IConf)
	public updateBar(number, number, boolean): void
	private init(conf: IConf): void
	private renderBar(conf: IConf): void

	======================================

	observer
	observers: Function[];

	public subscribe(Function):Function[] | boolean
	public unsubscribe(Function):Function[]
	protected fire(string, data: Idata, conf: IConf): void